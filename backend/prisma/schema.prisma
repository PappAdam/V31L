generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String       @id @default(uuid())
  username String       @unique
  password String
  authKey  Bytes? // Key for 2FA code generation (TOTP)
  iv       Bytes?
  authTag  Bytes?
  messages Message[]
  chats    ChatMember[]
}

model Chat {
  id       String       @id @default(uuid())
  name     String
  messages Message[]    @relation("ChatMessages")
  members  ChatMember[]

  lastMessageId String?  @unique
  lastMessage   Message? @relation("ChatLastMessage", fields: [lastMessageId], references: [id], onDelete: SetNull)
}

model Message {
  id        String   @id @default(uuid())
  chat      Chat     @relation("ChatMessages", fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  timeStamp DateTime @default(now())
  content   Bytes
  inIv      Bytes
  outIv     Bytes
  authTag   Bytes

  lastMessageForChat Chat? @relation("ChatLastMessage")
}

model ChatMember {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Delete members if user is deleted
  userId String

  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade) // Delete members if chat is deleted
  chatId String

  key Bytes

  @@unique([userId, chatId])
}
